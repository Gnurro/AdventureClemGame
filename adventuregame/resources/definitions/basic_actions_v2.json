[
  {
    "type_name": "open",
    "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
    "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n    )\n)",
    "pddl_parameter_mapping": {
      "?e": ["arg1"],
      "?r": ["current_player_room"],
      "?p": ["player"]
    },
    "failure_feedback": {
      "parameters": [
        "{{ e }} is not openable.",
        "{{ r }} is not a room. (This should not occur.)",
        "{{ p }} is not a player. (This should not occur.)"
      ],
      "precondition": [
        "You are not where you are! (This should not occur.)",
        "You can't see a {{ e }} here.",
        "The {{ e }} is not closed."
      ]
    },
    "success_feedback": "The {{ e }} is now open.",
    "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING)."
  },
  {
    "type_name": "close",
    "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
    "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n    )\n)",
    "pddl_parameter_mapping": {
      "?e": ["arg1"],
      "?r": ["current_player_room"],
      "?p": ["player"]
    },
    "failure_feedback": {
      "parameters": [
        "{{ e }} is not openable.",
        "{{ r }} is not a room. (This should not occur.)",
        "{{ p }} is not a player. (This should not occur.)"
      ],
      "precondition": [
        "You are not where you are! (This should not occur.)",
        "You can't see a {{ e }} here.",
        "The {{ e }} is not open."
      ]
    },
    "success_feedback": "The {{ e }} is now closed.",
    "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING)."
  },
  {
    "type_name": "take",
    "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
    "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?s ?r)\n        (or\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (and\n                (container ?s)\n                (in ?e ?s)\n                (open ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
    "pddl_parameter_mapping": {
      "?e": ["arg1"],
      "?s": ["arg2", "arg1_receptacle"],
      "?p": ["player"],
      "?i": ["inventory"],
      "?r": ["current_player_room"]
    },
    "failure_feedback": {
      "parameters": [
        "{{ e }} is not takeable.",
        "{{ s }} is not a receptacle.",
        "{{ p }} is not a player. (This should not occur.)",
        "{{ i }} is not an inventory. (This should not occur.)",
        "{{ r }} is not a room. (This should not occur.)"
      ],
      "precondition": [
        "You are not where you are! (This should not occur.)",
        "You can't see a {{ e }} here.",
        "You can't see a {{ s }} here.",
        "The {{ s }} is not a support.",
        "The {{ e }} is not on the {{ s }}.",
        "The {{ s }} is not a container.",
        "The {{ e }} is not in the {{ s }}.",
        "The {{ s }} is not open."
      ]
    },
    "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
    "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING)."
  },
  {
    "type_name": "put",
    "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
    "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (support ?t)\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
    "pddl_parameter_mapping": {
      "?e": ["arg1"],
      "?t": ["arg2"],
      "?p": ["player"],
      "?i": ["inventory"],
      "?r": ["current_player_room"]
    },
    "failure_feedback": {
      "parameters": [
        "{{ e }} is not moveable.",
        "{{ t }} is not a receptacle.",
        "{{ p }} is not a player. (This should not occur.)",
        "{{ i }} is not an inventory. (This should not occur.)",
        "{{ r }} is not a room. (This should not occur.)"
      ],
      "precondition": [
        "You are not where you are! (This should not occur.)",
        "You can't see a {{ e }} here.",
        "You can't see a {{ t }} here.",
        "The {{ t }} is not a support.",
        "The {{ t }} is not a container.",
        "The {{ t }} is not open."
      ]
    },
    "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
    "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_)."
  },
  {
    "type_name": "go",
    "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
    "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
    "pddl_parameter_mapping": {
      "?c": ["current_player_room"],
      "?d": ["arg1"],
      "?p": ["player"],
      "?i": ["inventory"]
    },
    "failure_feedback": {
      "parameters": [
        "{{ c }} is not a room.",
        "{{ d }} is not a room.",
        "{{ p }} is not a player. (This should not occur.)",
        "{{ i }} is not an inventory. (This should not occur.)"
      ],
      "precondition": [
        "You are not where you are! (This should not occur.)",
        "You are already in the {{ d }}.",
        "You can't go to a {{ d }} from here."
      ]
    },
    "success_feedback": "{{ room_desc }}",
    "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1."
  }
]